//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.269
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Moo.Debug.MooAPI {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BriefUserInfo", Namespace="http://schemas.datacontract.org/2004/07/Moo.API")]
    [System.SerializableAttribute()]
    public partial class BriefUserInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MooAPI.IAPI")]
    public interface IAPI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/Login", ReplyAction="http://tempuri.org/IAPI/LoginResponse")]
        string Login(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/AddTrustedUser", ReplyAction="http://tempuri.org/IAPI/AddTrustedUserResponse")]
        void AddTrustedUser(string sToken, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/RemoveTrustedUser", ReplyAction="http://tempuri.org/IAPI/RemoveTrustedUserResponse")]
        void RemoveTrustedUser(string sToken, int userID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/ListTrustedUser", ReplyAction="http://tempuri.org/IAPI/ListTrustedUserResponse")]
        Moo.Debug.MooAPI.BriefUserInfo[] ListTrustedUser(string sToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/GetUserByName", ReplyAction="http://tempuri.org/IAPI/GetUserByNameResponse")]
        Moo.Debug.MooAPI.BriefUserInfo GetUserByName(string sToken, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/CreateProblem", ReplyAction="http://tempuri.org/IAPI/CreateProblemResponse")]
        int CreateProblem(string sToken, string name, string type, string content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/CreateTranditionalTestCase", ReplyAction="http://tempuri.org/IAPI/CreateTranditionalTestCaseResponse")]
        int CreateTranditionalTestCase(string sToken, int problemID, byte[] input, byte[] answer, int timeLimit, int memoryLimit, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAPI/CreateSpecialJudgedTestCase", ReplyAction="http://tempuri.org/IAPI/CreateSpecialJudgedTestCaseResponse")]
        int CreateSpecialJudgedTestCase(string sToken, int problemID, int judgerID, byte[] input, byte[] answer, int timeLimit, int memoryLimit);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAPIChannel : Moo.Debug.MooAPI.IAPI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class APIClient : System.ServiceModel.ClientBase<Moo.Debug.MooAPI.IAPI>, Moo.Debug.MooAPI.IAPI {
        
        public APIClient() {
        }
        
        public APIClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public APIClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public APIClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public APIClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string userName, string password) {
            return base.Channel.Login(userName, password);
        }
        
        public void AddTrustedUser(string sToken, int userID) {
            base.Channel.AddTrustedUser(sToken, userID);
        }
        
        public void RemoveTrustedUser(string sToken, int userID) {
            base.Channel.RemoveTrustedUser(sToken, userID);
        }
        
        public Moo.Debug.MooAPI.BriefUserInfo[] ListTrustedUser(string sToken) {
            return base.Channel.ListTrustedUser(sToken);
        }
        
        public Moo.Debug.MooAPI.BriefUserInfo GetUserByName(string sToken, string userName) {
            return base.Channel.GetUserByName(sToken, userName);
        }
        
        public int CreateProblem(string sToken, string name, string type, string content) {
            return base.Channel.CreateProblem(sToken, name, type, content);
        }
        
        public int CreateTranditionalTestCase(string sToken, int problemID, byte[] input, byte[] answer, int timeLimit, int memoryLimit, int score) {
            return base.Channel.CreateTranditionalTestCase(sToken, problemID, input, answer, timeLimit, memoryLimit, score);
        }
        
        public int CreateSpecialJudgedTestCase(string sToken, int problemID, int judgerID, byte[] input, byte[] answer, int timeLimit, int memoryLimit) {
            return base.Channel.CreateSpecialJudgedTestCase(sToken, problemID, judgerID, input, answer, timeLimit, memoryLimit);
        }
    }
}
