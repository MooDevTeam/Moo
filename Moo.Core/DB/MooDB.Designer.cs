//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("Moo.Core.DB", "RecordProblem", "Record", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Record), "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Problem))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "TestDataProblem", "TestData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.TestCase), "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Problem))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ProblemProblemRevision", "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Problem), "ProblemRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.ProblemRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserProblemRevision", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "ProblemRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.ProblemRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserRole", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.User), "Role", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Role))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserCreatePostItem", "PostItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.PostItem), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "PostItemPost", "PostItem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.PostItem), "Post", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Post))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "PostProblem", "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.Problem), "Post", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Post))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "RecordJudgeInfo", "Record", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Record), "JudgeInfo", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.JudgeInfo))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "MailFrom", "Mail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Mail), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "MailTo", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "Mail", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Mail))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "LastestRevisionOfProblem", "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.Problem), "ProblemRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.ProblemRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserAttendContest", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.User), "Contest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Contest))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserRecord", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "Record", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Record))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ContestProblem", "Contest", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Contest), "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Problem))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "SpecialJudgedTestCaseUploadedFile", "SpecialJudgedTestCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.SpecialJudgedTestCase), "UploadedFile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.UploadedFile))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "InteractiveTestCaseInvokerFile", "InteractiveTestCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.InteractiveTestCase), "UploadedFile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.UploadedFile))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "AnswerOnlyTestCaseUploadedFile", "AnswerOnlyTestCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.AnswerOnlyTestCase), "UploadedFile", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.UploadedFile))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserTestCase", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "TestCase", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.TestCase))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UploadedFileUser", "UploadedFile", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.UploadedFile), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserCreateProblem", "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Problem), "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserCreateArticle", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Article))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "UserCreateArticleRevision", "User", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.User), "ArticleRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.ArticleRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ArticleArticleRevision", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Moo.Core.DB.Article), "ArticleRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.ArticleRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ArticleLatestRevision", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.Article), "ArticleRevision", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.ArticleRevision))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ArticleProblem", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Article), "Problem", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Moo.Core.DB.Problem))]
[assembly: EdmRelationshipAttribute("Moo.Core.DB", "ArticleTag", "Article", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Article), "Tag", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Moo.Core.DB.Tag))]

#endregion

namespace Moo.Core.DB
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class MooDB : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“MooDB”部分中的连接字符串初始化新 MooDB 对象。
        /// </summary>
        public MooDB() : base("name=MooDB", "MooDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 MooDB 对象。
        /// </summary>
        public MooDB(string connectionString) : base(connectionString, "MooDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 MooDB 对象。
        /// </summary>
        public MooDB(EntityConnection connection) : base(connection, "MooDB")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<User> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<User>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<User> _Users;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Role> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Role>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Role> _Roles;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Problem> Problems
        {
            get
            {
                if ((_Problems == null))
                {
                    _Problems = base.CreateObjectSet<Problem>("Problems");
                }
                return _Problems;
            }
        }
        private ObjectSet<Problem> _Problems;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Record> Records
        {
            get
            {
                if ((_Records == null))
                {
                    _Records = base.CreateObjectSet<Record>("Records");
                }
                return _Records;
            }
        }
        private ObjectSet<Record> _Records;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<TestCase> TestCases
        {
            get
            {
                if ((_TestCases == null))
                {
                    _TestCases = base.CreateObjectSet<TestCase>("TestCases");
                }
                return _TestCases;
            }
        }
        private ObjectSet<TestCase> _TestCases;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<ProblemRevision> ProblemRevisions
        {
            get
            {
                if ((_ProblemRevisions == null))
                {
                    _ProblemRevisions = base.CreateObjectSet<ProblemRevision>("ProblemRevisions");
                }
                return _ProblemRevisions;
            }
        }
        private ObjectSet<ProblemRevision> _ProblemRevisions;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Post> Posts
        {
            get
            {
                if ((_Posts == null))
                {
                    _Posts = base.CreateObjectSet<Post>("Posts");
                }
                return _Posts;
            }
        }
        private ObjectSet<Post> _Posts;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<PostItem> PostItems
        {
            get
            {
                if ((_PostItems == null))
                {
                    _PostItems = base.CreateObjectSet<PostItem>("PostItems");
                }
                return _PostItems;
            }
        }
        private ObjectSet<PostItem> _PostItems;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<JudgeInfo> JudgeInfos
        {
            get
            {
                if ((_JudgeInfos == null))
                {
                    _JudgeInfos = base.CreateObjectSet<JudgeInfo>("JudgeInfos");
                }
                return _JudgeInfos;
            }
        }
        private ObjectSet<JudgeInfo> _JudgeInfos;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Mail> Mails
        {
            get
            {
                if ((_Mails == null))
                {
                    _Mails = base.CreateObjectSet<Mail>("Mails");
                }
                return _Mails;
            }
        }
        private ObjectSet<Mail> _Mails;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Contest> Contests
        {
            get
            {
                if ((_Contests == null))
                {
                    _Contests = base.CreateObjectSet<Contest>("Contests");
                }
                return _Contests;
            }
        }
        private ObjectSet<Contest> _Contests;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<UploadedFile> UploadedFiles
        {
            get
            {
                if ((_UploadedFiles == null))
                {
                    _UploadedFiles = base.CreateObjectSet<UploadedFile>("UploadedFiles");
                }
                return _UploadedFiles;
            }
        }
        private ObjectSet<UploadedFile> _UploadedFiles;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Article> Articles
        {
            get
            {
                if ((_Articles == null))
                {
                    _Articles = base.CreateObjectSet<Article>("Articles");
                }
                return _Articles;
            }
        }
        private ObjectSet<Article> _Articles;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<ArticleRevision> ArticleRevisions
        {
            get
            {
                if ((_ArticleRevisions == null))
                {
                    _ArticleRevisions = base.CreateObjectSet<ArticleRevision>("ArticleRevisions");
                }
                return _ArticleRevisions;
            }
        }
        private ObjectSet<ArticleRevision> _ArticleRevisions;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<Tag> Tags
        {
            get
            {
                if ((_Tags == null))
                {
                    _Tags = base.CreateObjectSet<Tag>("Tags");
                }
                return _Tags;
            }
        }
        private ObjectSet<Tag> _Tags;

        #endregion

        #region AddTo 方法
    
        /// <summary>
        /// 用于向 Users EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUsers(User user)
        {
            base.AddObject("Users", user);
        }
    
        /// <summary>
        /// 用于向 Roles EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRoles(Role role)
        {
            base.AddObject("Roles", role);
        }
    
        /// <summary>
        /// 用于向 Problems EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToProblems(Problem problem)
        {
            base.AddObject("Problems", problem);
        }
    
        /// <summary>
        /// 用于向 Records EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToRecords(Record record)
        {
            base.AddObject("Records", record);
        }
    
        /// <summary>
        /// 用于向 TestCases EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTestCases(TestCase testCase)
        {
            base.AddObject("TestCases", testCase);
        }
    
        /// <summary>
        /// 用于向 ProblemRevisions EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToProblemRevisions(ProblemRevision problemRevision)
        {
            base.AddObject("ProblemRevisions", problemRevision);
        }
    
        /// <summary>
        /// 用于向 Posts EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToPosts(Post post)
        {
            base.AddObject("Posts", post);
        }
    
        /// <summary>
        /// 用于向 PostItems EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToPostItems(PostItem postItem)
        {
            base.AddObject("PostItems", postItem);
        }
    
        /// <summary>
        /// 用于向 JudgeInfos EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToJudgeInfos(JudgeInfo judgeInfo)
        {
            base.AddObject("JudgeInfos", judgeInfo);
        }
    
        /// <summary>
        /// 用于向 Mails EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToMails(Mail mail)
        {
            base.AddObject("Mails", mail);
        }
    
        /// <summary>
        /// 用于向 Contests EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToContests(Contest contest)
        {
            base.AddObject("Contests", contest);
        }
    
        /// <summary>
        /// 用于向 UploadedFiles EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToUploadedFiles(UploadedFile uploadedFile)
        {
            base.AddObject("UploadedFiles", uploadedFile);
        }
    
        /// <summary>
        /// 用于向 Articles EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToArticles(Article article)
        {
            base.AddObject("Articles", article);
        }
    
        /// <summary>
        /// 用于向 ArticleRevisions EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToArticleRevisions(ArticleRevision articleRevision)
        {
            base.AddObject("ArticleRevisions", articleRevision);
        }
    
        /// <summary>
        /// 用于向 Tags EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTags(Tag tag)
        {
            base.AddObject("Tags", tag);
        }

        #endregion

    }

    #endregion

    #region 实体
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="AnswerOnlyTestCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AnswerOnlyTestCase : TestCase
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 AnswerOnlyTestCase 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="testData">TestData 属性的初始值。</param>
        public static AnswerOnlyTestCase CreateAnswerOnlyTestCase(global::System.Int32 id, global::System.Byte[] testData)
        {
            AnswerOnlyTestCase answerOnlyTestCase = new AnswerOnlyTestCase();
            answerOnlyTestCase.ID = id;
            answerOnlyTestCase.TestData = testData;
            return answerOnlyTestCase;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] TestData
        {
            get
            {
                return StructuralObject.GetValidValue(_TestData);
            }
            set
            {
                OnTestDataChanging(value);
                ReportPropertyChanging("TestData");
                _TestData = StructuralObject.SetValidValue(value, false, "TestData");
                ReportPropertyChanged("TestData");
                OnTestDataChanged();
            }
        }
        private global::System.Byte[] _TestData;
        partial void OnTestDataChanging(global::System.Byte[] value);
        partial void OnTestDataChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "AnswerOnlyTestCaseUploadedFile", "UploadedFile")]
        public UploadedFile Judger
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.AnswerOnlyTestCaseUploadedFile", "UploadedFile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.AnswerOnlyTestCaseUploadedFile", "UploadedFile").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UploadedFile> JudgerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.AnswerOnlyTestCaseUploadedFile", "UploadedFile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UploadedFile>("Moo.Core.DB.AnswerOnlyTestCaseUploadedFile", "UploadedFile", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Article")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Article : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Article 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        public static Article CreateArticle(global::System.Int32 id, global::System.String name, global::System.DateTime createTime)
        {
            Article article = new Article();
            article.ID = id;
            article.Name = name;
            article.CreateTime = createTime;
            return article;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserCreateArticle", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticle", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticle", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticle", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserCreateArticle", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ArticleLatestRevision", "ArticleRevision")]
        public ArticleRevision LatestRevision
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ArticleRevision>("Moo.Core.DB.ArticleLatestRevision", "ArticleRevision").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ArticleRevision>("Moo.Core.DB.ArticleLatestRevision", "ArticleRevision").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ArticleRevision> LatestRevisionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ArticleRevision>("Moo.Core.DB.ArticleLatestRevision", "ArticleRevision");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ArticleRevision>("Moo.Core.DB.ArticleLatestRevision", "ArticleRevision", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ArticleProblem", "Problem")]
        public Problem Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ArticleProblem", "Problem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ArticleProblem", "Problem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Problem> ProblemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ArticleProblem", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Problem>("Moo.Core.DB.ArticleProblem", "Problem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ArticleTag", "Tag")]
        public EntityCollection<Tag> Tag
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Tag>("Moo.Core.DB.ArticleTag", "Tag");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Tag>("Moo.Core.DB.ArticleTag", "Tag", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="ArticleRevision")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ArticleRevision : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 ArticleRevision 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="content">Content 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        /// <param name="reason">Reason 属性的初始值。</param>
        public static ArticleRevision CreateArticleRevision(global::System.Int32 id, global::System.String content, global::System.DateTime createTime, global::System.String reason)
        {
            ArticleRevision articleRevision = new ArticleRevision();
            articleRevision.ID = id;
            articleRevision.Content = content;
            articleRevision.CreateTime = createTime;
            articleRevision.Reason = reason;
            return articleRevision;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, false, "Content");
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, false, "Reason");
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserCreateArticleRevision", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticleRevision", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticleRevision", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateArticleRevision", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserCreateArticleRevision", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ArticleArticleRevision", "Article")]
        public Article Article
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Article>("Moo.Core.DB.ArticleArticleRevision", "Article").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Article>("Moo.Core.DB.ArticleArticleRevision", "Article").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Article> ArticleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Article>("Moo.Core.DB.ArticleArticleRevision", "Article");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Article>("Moo.Core.DB.ArticleArticleRevision", "Article", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Contest")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Contest : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Contest 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="startTime">StartTime 属性的初始值。</param>
        /// <param name="endTime">EndTime 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="lockProblemOnStart">LockProblemOnStart 属性的初始值。</param>
        /// <param name="lockTestCaseOnStart">LockTestCaseOnStart 属性的初始值。</param>
        /// <param name="lockPostOnStart">LockPostOnStart 属性的初始值。</param>
        /// <param name="hideTestCaseOnStart">HideTestCaseOnStart 属性的初始值。</param>
        /// <param name="enableTestingOnStart">EnableTestingOnStart 属性的初始值。</param>
        /// <param name="description">Description 属性的初始值。</param>
        /// <param name="status">Status 属性的初始值。</param>
        /// <param name="hideProblemOnStart">HideProblemOnStart 属性的初始值。</param>
        /// <param name="lockRecordOnStart">LockRecordOnStart 属性的初始值。</param>
        /// <param name="lockProblemOnEnd">LockProblemOnEnd 属性的初始值。</param>
        /// <param name="lockTestCaseOnEnd">LockTestCaseOnEnd 属性的初始值。</param>
        /// <param name="lockPostOnEnd">LockPostOnEnd 属性的初始值。</param>
        /// <param name="lockRecordOnEnd">LockRecordOnEnd 属性的初始值。</param>
        /// <param name="enableTestingOnEnd">EnableTestingOnEnd 属性的初始值。</param>
        /// <param name="hideProblemOnEnd">HideProblemOnEnd 属性的初始值。</param>
        /// <param name="hideTestCaseOnEnd">HideTestCaseOnEnd 属性的初始值。</param>
        /// <param name="lockArticleOnStart">LockArticleOnStart 属性的初始值。</param>
        /// <param name="lockArticleOnEnd">LockArticleOnEnd 属性的初始值。</param>
        public static Contest CreateContest(global::System.Int32 id, global::System.DateTime startTime, global::System.DateTime endTime, global::System.String name, global::System.Boolean lockProblemOnStart, global::System.Boolean lockTestCaseOnStart, global::System.Boolean lockPostOnStart, global::System.Boolean hideTestCaseOnStart, global::System.Boolean enableTestingOnStart, global::System.String description, global::System.String status, global::System.Boolean hideProblemOnStart, global::System.Boolean lockRecordOnStart, global::System.Boolean lockProblemOnEnd, global::System.Boolean lockTestCaseOnEnd, global::System.Boolean lockPostOnEnd, global::System.Boolean lockRecordOnEnd, global::System.Boolean enableTestingOnEnd, global::System.Boolean hideProblemOnEnd, global::System.Boolean hideTestCaseOnEnd, global::System.Boolean lockArticleOnStart, global::System.Boolean lockArticleOnEnd)
        {
            Contest contest = new Contest();
            contest.ID = id;
            contest.StartTime = startTime;
            contest.EndTime = endTime;
            contest.Name = name;
            contest.LockProblemOnStart = lockProblemOnStart;
            contest.LockTestCaseOnStart = lockTestCaseOnStart;
            contest.LockPostOnStart = lockPostOnStart;
            contest.HideTestCaseOnStart = hideTestCaseOnStart;
            contest.EnableTestingOnStart = enableTestingOnStart;
            contest.Description = description;
            contest.Status = status;
            contest.HideProblemOnStart = hideProblemOnStart;
            contest.LockRecordOnStart = lockRecordOnStart;
            contest.LockProblemOnEnd = lockProblemOnEnd;
            contest.LockTestCaseOnEnd = lockTestCaseOnEnd;
            contest.LockPostOnEnd = lockPostOnEnd;
            contest.LockRecordOnEnd = lockRecordOnEnd;
            contest.EnableTestingOnEnd = enableTestingOnEnd;
            contest.HideProblemOnEnd = hideProblemOnEnd;
            contest.HideTestCaseOnEnd = hideTestCaseOnEnd;
            contest.LockArticleOnStart = lockArticleOnStart;
            contest.LockArticleOnEnd = lockArticleOnEnd;
            return contest;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value, "StartTime");
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.DateTime _StartTime;
        partial void OnStartTimeChanging(global::System.DateTime value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
                OnEndTimeChanging(value);
                ReportPropertyChanging("EndTime");
                _EndTime = StructuralObject.SetValidValue(value, "EndTime");
                ReportPropertyChanged("EndTime");
                OnEndTimeChanged();
            }
        }
        private global::System.DateTime _EndTime;
        partial void OnEndTimeChanging(global::System.DateTime value);
        partial void OnEndTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockProblemOnStart
        {
            get
            {
                return _LockProblemOnStart;
            }
            set
            {
                OnLockProblemOnStartChanging(value);
                ReportPropertyChanging("LockProblemOnStart");
                _LockProblemOnStart = StructuralObject.SetValidValue(value, "LockProblemOnStart");
                ReportPropertyChanged("LockProblemOnStart");
                OnLockProblemOnStartChanged();
            }
        }
        private global::System.Boolean _LockProblemOnStart;
        partial void OnLockProblemOnStartChanging(global::System.Boolean value);
        partial void OnLockProblemOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockTestCaseOnStart
        {
            get
            {
                return _LockTestCaseOnStart;
            }
            set
            {
                OnLockTestCaseOnStartChanging(value);
                ReportPropertyChanging("LockTestCaseOnStart");
                _LockTestCaseOnStart = StructuralObject.SetValidValue(value, "LockTestCaseOnStart");
                ReportPropertyChanged("LockTestCaseOnStart");
                OnLockTestCaseOnStartChanged();
            }
        }
        private global::System.Boolean _LockTestCaseOnStart;
        partial void OnLockTestCaseOnStartChanging(global::System.Boolean value);
        partial void OnLockTestCaseOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockPostOnStart
        {
            get
            {
                return _LockPostOnStart;
            }
            set
            {
                OnLockPostOnStartChanging(value);
                ReportPropertyChanging("LockPostOnStart");
                _LockPostOnStart = StructuralObject.SetValidValue(value, "LockPostOnStart");
                ReportPropertyChanged("LockPostOnStart");
                OnLockPostOnStartChanged();
            }
        }
        private global::System.Boolean _LockPostOnStart;
        partial void OnLockPostOnStartChanging(global::System.Boolean value);
        partial void OnLockPostOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HideTestCaseOnStart
        {
            get
            {
                return _HideTestCaseOnStart;
            }
            set
            {
                OnHideTestCaseOnStartChanging(value);
                ReportPropertyChanging("HideTestCaseOnStart");
                _HideTestCaseOnStart = StructuralObject.SetValidValue(value, "HideTestCaseOnStart");
                ReportPropertyChanged("HideTestCaseOnStart");
                OnHideTestCaseOnStartChanged();
            }
        }
        private global::System.Boolean _HideTestCaseOnStart;
        partial void OnHideTestCaseOnStartChanging(global::System.Boolean value);
        partial void OnHideTestCaseOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean EnableTestingOnStart
        {
            get
            {
                return _EnableTestingOnStart;
            }
            set
            {
                OnEnableTestingOnStartChanging(value);
                ReportPropertyChanging("EnableTestingOnStart");
                _EnableTestingOnStart = StructuralObject.SetValidValue(value, "EnableTestingOnStart");
                ReportPropertyChanged("EnableTestingOnStart");
                OnEnableTestingOnStartChanged();
            }
        }
        private global::System.Boolean _EnableTestingOnStart;
        partial void OnEnableTestingOnStartChanging(global::System.Boolean value);
        partial void OnEnableTestingOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Status
        {
            get
            {
                return _Status;
            }
            set
            {
                OnStatusChanging(value);
                ReportPropertyChanging("Status");
                _Status = StructuralObject.SetValidValue(value, false, "Status");
                ReportPropertyChanged("Status");
                OnStatusChanged();
            }
        }
        private global::System.String _Status;
        partial void OnStatusChanging(global::System.String value);
        partial void OnStatusChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HideProblemOnStart
        {
            get
            {
                return _HideProblemOnStart;
            }
            set
            {
                OnHideProblemOnStartChanging(value);
                ReportPropertyChanging("HideProblemOnStart");
                _HideProblemOnStart = StructuralObject.SetValidValue(value, "HideProblemOnStart");
                ReportPropertyChanged("HideProblemOnStart");
                OnHideProblemOnStartChanged();
            }
        }
        private global::System.Boolean _HideProblemOnStart;
        partial void OnHideProblemOnStartChanging(global::System.Boolean value);
        partial void OnHideProblemOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockRecordOnStart
        {
            get
            {
                return _LockRecordOnStart;
            }
            set
            {
                OnLockRecordOnStartChanging(value);
                ReportPropertyChanging("LockRecordOnStart");
                _LockRecordOnStart = StructuralObject.SetValidValue(value, "LockRecordOnStart");
                ReportPropertyChanged("LockRecordOnStart");
                OnLockRecordOnStartChanged();
            }
        }
        private global::System.Boolean _LockRecordOnStart;
        partial void OnLockRecordOnStartChanging(global::System.Boolean value);
        partial void OnLockRecordOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockProblemOnEnd
        {
            get
            {
                return _LockProblemOnEnd;
            }
            set
            {
                OnLockProblemOnEndChanging(value);
                ReportPropertyChanging("LockProblemOnEnd");
                _LockProblemOnEnd = StructuralObject.SetValidValue(value, "LockProblemOnEnd");
                ReportPropertyChanged("LockProblemOnEnd");
                OnLockProblemOnEndChanged();
            }
        }
        private global::System.Boolean _LockProblemOnEnd;
        partial void OnLockProblemOnEndChanging(global::System.Boolean value);
        partial void OnLockProblemOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockTestCaseOnEnd
        {
            get
            {
                return _LockTestCaseOnEnd;
            }
            set
            {
                OnLockTestCaseOnEndChanging(value);
                ReportPropertyChanging("LockTestCaseOnEnd");
                _LockTestCaseOnEnd = StructuralObject.SetValidValue(value, "LockTestCaseOnEnd");
                ReportPropertyChanged("LockTestCaseOnEnd");
                OnLockTestCaseOnEndChanged();
            }
        }
        private global::System.Boolean _LockTestCaseOnEnd;
        partial void OnLockTestCaseOnEndChanging(global::System.Boolean value);
        partial void OnLockTestCaseOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockPostOnEnd
        {
            get
            {
                return _LockPostOnEnd;
            }
            set
            {
                OnLockPostOnEndChanging(value);
                ReportPropertyChanging("LockPostOnEnd");
                _LockPostOnEnd = StructuralObject.SetValidValue(value, "LockPostOnEnd");
                ReportPropertyChanged("LockPostOnEnd");
                OnLockPostOnEndChanged();
            }
        }
        private global::System.Boolean _LockPostOnEnd;
        partial void OnLockPostOnEndChanging(global::System.Boolean value);
        partial void OnLockPostOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockRecordOnEnd
        {
            get
            {
                return _LockRecordOnEnd;
            }
            set
            {
                OnLockRecordOnEndChanging(value);
                ReportPropertyChanging("LockRecordOnEnd");
                _LockRecordOnEnd = StructuralObject.SetValidValue(value, "LockRecordOnEnd");
                ReportPropertyChanged("LockRecordOnEnd");
                OnLockRecordOnEndChanged();
            }
        }
        private global::System.Boolean _LockRecordOnEnd;
        partial void OnLockRecordOnEndChanging(global::System.Boolean value);
        partial void OnLockRecordOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean EnableTestingOnEnd
        {
            get
            {
                return _EnableTestingOnEnd;
            }
            set
            {
                OnEnableTestingOnEndChanging(value);
                ReportPropertyChanging("EnableTestingOnEnd");
                _EnableTestingOnEnd = StructuralObject.SetValidValue(value, "EnableTestingOnEnd");
                ReportPropertyChanged("EnableTestingOnEnd");
                OnEnableTestingOnEndChanged();
            }
        }
        private global::System.Boolean _EnableTestingOnEnd;
        partial void OnEnableTestingOnEndChanging(global::System.Boolean value);
        partial void OnEnableTestingOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HideProblemOnEnd
        {
            get
            {
                return _HideProblemOnEnd;
            }
            set
            {
                OnHideProblemOnEndChanging(value);
                ReportPropertyChanging("HideProblemOnEnd");
                _HideProblemOnEnd = StructuralObject.SetValidValue(value, "HideProblemOnEnd");
                ReportPropertyChanged("HideProblemOnEnd");
                OnHideProblemOnEndChanged();
            }
        }
        private global::System.Boolean _HideProblemOnEnd;
        partial void OnHideProblemOnEndChanging(global::System.Boolean value);
        partial void OnHideProblemOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HideTestCaseOnEnd
        {
            get
            {
                return _HideTestCaseOnEnd;
            }
            set
            {
                OnHideTestCaseOnEndChanging(value);
                ReportPropertyChanging("HideTestCaseOnEnd");
                _HideTestCaseOnEnd = StructuralObject.SetValidValue(value, "HideTestCaseOnEnd");
                ReportPropertyChanged("HideTestCaseOnEnd");
                OnHideTestCaseOnEndChanged();
            }
        }
        private global::System.Boolean _HideTestCaseOnEnd;
        partial void OnHideTestCaseOnEndChanging(global::System.Boolean value);
        partial void OnHideTestCaseOnEndChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockArticleOnStart
        {
            get
            {
                return _LockArticleOnStart;
            }
            set
            {
                OnLockArticleOnStartChanging(value);
                ReportPropertyChanging("LockArticleOnStart");
                _LockArticleOnStart = StructuralObject.SetValidValue(value, "LockArticleOnStart");
                ReportPropertyChanged("LockArticleOnStart");
                OnLockArticleOnStartChanged();
            }
        }
        private global::System.Boolean _LockArticleOnStart;
        partial void OnLockArticleOnStartChanging(global::System.Boolean value);
        partial void OnLockArticleOnStartChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean LockArticleOnEnd
        {
            get
            {
                return _LockArticleOnEnd;
            }
            set
            {
                OnLockArticleOnEndChanging(value);
                ReportPropertyChanging("LockArticleOnEnd");
                _LockArticleOnEnd = StructuralObject.SetValidValue(value, "LockArticleOnEnd");
                ReportPropertyChanged("LockArticleOnEnd");
                OnLockArticleOnEndChanged();
            }
        }
        private global::System.Boolean _LockArticleOnEnd;
        partial void OnLockArticleOnEndChanging(global::System.Boolean value);
        partial void OnLockArticleOnEndChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserAttendContest", "User")]
        public EntityCollection<User> User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<User>("Moo.Core.DB.UserAttendContest", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<User>("Moo.Core.DB.UserAttendContest", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ContestProblem", "Problem")]
        public EntityCollection<Problem> Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Problem>("Moo.Core.DB.ContestProblem", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Problem>("Moo.Core.DB.ContestProblem", "Problem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="InteractiveTestCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class InteractiveTestCase : TestCase
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 InteractiveTestCase 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="testData">TestData 属性的初始值。</param>
        /// <param name="timeLimit">TimeLimit 属性的初始值。</param>
        /// <param name="memoryLimit">MemoryLimit 属性的初始值。</param>
        public static InteractiveTestCase CreateInteractiveTestCase(global::System.Int32 id, global::System.Byte[] testData, global::System.Int32 timeLimit, global::System.Int32 memoryLimit)
        {
            InteractiveTestCase interactiveTestCase = new InteractiveTestCase();
            interactiveTestCase.ID = id;
            interactiveTestCase.TestData = testData;
            interactiveTestCase.TimeLimit = timeLimit;
            interactiveTestCase.MemoryLimit = memoryLimit;
            return interactiveTestCase;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] TestData
        {
            get
            {
                return StructuralObject.GetValidValue(_TestData);
            }
            set
            {
                OnTestDataChanging(value);
                ReportPropertyChanging("TestData");
                _TestData = StructuralObject.SetValidValue(value, false, "TestData");
                ReportPropertyChanged("TestData");
                OnTestDataChanged();
            }
        }
        private global::System.Byte[] _TestData;
        partial void OnTestDataChanging(global::System.Byte[] value);
        partial void OnTestDataChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TimeLimit
        {
            get
            {
                return _TimeLimit;
            }
            set
            {
                OnTimeLimitChanging(value);
                ReportPropertyChanging("TimeLimit");
                _TimeLimit = StructuralObject.SetValidValue(value, "TimeLimit");
                ReportPropertyChanged("TimeLimit");
                OnTimeLimitChanged();
            }
        }
        private global::System.Int32 _TimeLimit;
        partial void OnTimeLimitChanging(global::System.Int32 value);
        partial void OnTimeLimitChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryLimit
        {
            get
            {
                return _MemoryLimit;
            }
            set
            {
                OnMemoryLimitChanging(value);
                ReportPropertyChanging("MemoryLimit");
                _MemoryLimit = StructuralObject.SetValidValue(value, "MemoryLimit");
                ReportPropertyChanged("MemoryLimit");
                OnMemoryLimitChanged();
            }
        }
        private global::System.Int32 _MemoryLimit;
        partial void OnMemoryLimitChanging(global::System.Int32 value);
        partial void OnMemoryLimitChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "InteractiveTestCaseInvokerFile", "UploadedFile")]
        public UploadedFile Invoker
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.InteractiveTestCaseInvokerFile", "UploadedFile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.InteractiveTestCaseInvokerFile", "UploadedFile").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UploadedFile> InvokerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.InteractiveTestCaseInvokerFile", "UploadedFile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UploadedFile>("Moo.Core.DB.InteractiveTestCaseInvokerFile", "UploadedFile", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="JudgeInfo")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class JudgeInfo : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 JudgeInfo 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="score">Score 属性的初始值。</param>
        /// <param name="info">Info 属性的初始值。</param>
        public static JudgeInfo CreateJudgeInfo(global::System.Int32 id, global::System.Int32 score, global::System.String info)
        {
            JudgeInfo judgeInfo = new JudgeInfo();
            judgeInfo.ID = id;
            judgeInfo.Score = score;
            judgeInfo.Info = info;
            return judgeInfo;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, "Score");
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Info
        {
            get
            {
                return _Info;
            }
            set
            {
                OnInfoChanging(value);
                ReportPropertyChanging("Info");
                _Info = StructuralObject.SetValidValue(value, false, "Info");
                ReportPropertyChanged("Info");
                OnInfoChanged();
            }
        }
        private global::System.String _Info;
        partial void OnInfoChanging(global::System.String value);
        partial void OnInfoChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "RecordJudgeInfo", "Record")]
        public Record Record
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Record>("Moo.Core.DB.RecordJudgeInfo", "Record").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Record>("Moo.Core.DB.RecordJudgeInfo", "Record").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Record> RecordReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Record>("Moo.Core.DB.RecordJudgeInfo", "Record");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Record>("Moo.Core.DB.RecordJudgeInfo", "Record", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Mail")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Mail : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Mail 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="content">Content 属性的初始值。</param>
        /// <param name="isRead">IsRead 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        public static Mail CreateMail(global::System.Int32 id, global::System.String name, global::System.String content, global::System.Boolean isRead, global::System.DateTime createTime)
        {
            Mail mail = new Mail();
            mail.ID = id;
            mail.Name = name;
            mail.Content = content;
            mail.IsRead = isRead;
            mail.CreateTime = createTime;
            return mail;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, false, "Content");
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsRead
        {
            get
            {
                return _IsRead;
            }
            set
            {
                OnIsReadChanging(value);
                ReportPropertyChanging("IsRead");
                _IsRead = StructuralObject.SetValidValue(value, "IsRead");
                ReportPropertyChanged("IsRead");
                OnIsReadChanged();
            }
        }
        private global::System.Boolean _IsRead;
        partial void OnIsReadChanging(global::System.Boolean value);
        partial void OnIsReadChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "MailFrom", "User")]
        public User From
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailFrom", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailFrom", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> FromReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailFrom", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.MailFrom", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "MailTo", "User")]
        public User To
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailTo", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailTo", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> ToReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.MailTo", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.MailTo", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Post")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Post : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Post 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="onTop">OnTop 属性的初始值。</param>
        /// <param name="replyTime">ReplyTime 属性的初始值。</param>
        /// <param name="locked">Locked 属性的初始值。</param>
        public static Post CreatePost(global::System.Int32 id, global::System.String name, global::System.Boolean onTop, global::System.DateTime replyTime, global::System.Boolean locked)
        {
            Post post = new Post();
            post.ID = id;
            post.Name = name;
            post.OnTop = onTop;
            post.ReplyTime = replyTime;
            post.Locked = locked;
            return post;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean OnTop
        {
            get
            {
                return _OnTop;
            }
            set
            {
                OnOnTopChanging(value);
                ReportPropertyChanging("OnTop");
                _OnTop = StructuralObject.SetValidValue(value, "OnTop");
                ReportPropertyChanged("OnTop");
                OnOnTopChanged();
            }
        }
        private global::System.Boolean _OnTop;
        partial void OnOnTopChanging(global::System.Boolean value);
        partial void OnOnTopChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime ReplyTime
        {
            get
            {
                return _ReplyTime;
            }
            set
            {
                OnReplyTimeChanging(value);
                ReportPropertyChanging("ReplyTime");
                _ReplyTime = StructuralObject.SetValidValue(value, "ReplyTime");
                ReportPropertyChanged("ReplyTime");
                OnReplyTimeChanged();
            }
        }
        private global::System.DateTime _ReplyTime;
        partial void OnReplyTimeChanging(global::System.DateTime value);
        partial void OnReplyTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Locked
        {
            get
            {
                return _Locked;
            }
            set
            {
                OnLockedChanging(value);
                ReportPropertyChanging("Locked");
                _Locked = StructuralObject.SetValidValue(value, "Locked");
                ReportPropertyChanged("Locked");
                OnLockedChanged();
            }
        }
        private global::System.Boolean _Locked;
        partial void OnLockedChanging(global::System.Boolean value);
        partial void OnLockedChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "PostProblem", "Problem")]
        public Problem Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.PostProblem", "Problem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.PostProblem", "Problem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Problem> ProblemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.PostProblem", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Problem>("Moo.Core.DB.PostProblem", "Problem", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="PostItem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PostItem : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 PostItem 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="content">Content 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        public static PostItem CreatePostItem(global::System.Int32 id, global::System.String content, global::System.DateTime createTime)
        {
            PostItem postItem = new PostItem();
            postItem.ID = id;
            postItem.Content = content;
            postItem.CreateTime = createTime;
            return postItem;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, false, "Content");
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserCreatePostItem", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreatePostItem", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreatePostItem", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreatePostItem", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserCreatePostItem", "User", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "PostItemPost", "Post")]
        public Post Post
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("Moo.Core.DB.PostItemPost", "Post").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("Moo.Core.DB.PostItemPost", "Post").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Post> PostReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Post>("Moo.Core.DB.PostItemPost", "Post");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Post>("Moo.Core.DB.PostItemPost", "Post", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Problem")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Problem : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Problem 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="type">Type 属性的初始值。</param>
        /// <param name="submissionTimes">SubmissionTimes 属性的初始值。</param>
        /// <param name="scoreSum">ScoreSum 属性的初始值。</param>
        /// <param name="submissionUser">SubmissionUser 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        /// <param name="hidden">Hidden 属性的初始值。</param>
        /// <param name="locked">Locked 属性的初始值。</param>
        /// <param name="recordLocked">RecordLocked 属性的初始值。</param>
        /// <param name="postLocked">PostLocked 属性的初始值。</param>
        /// <param name="articleLocked">ArticleLocked 属性的初始值。</param>
        /// <param name="testCaseLocked">TestCaseLocked 属性的初始值。</param>
        /// <param name="enableTesting">EnableTesting 属性的初始值。</param>
        /// <param name="testCaseHidden">TestCaseHidden 属性的初始值。</param>
        public static Problem CreateProblem(global::System.Int32 id, global::System.String name, global::System.String type, global::System.Int32 submissionTimes, global::System.Int64 scoreSum, global::System.Int32 submissionUser, global::System.DateTime createTime, global::System.Boolean hidden, global::System.Boolean locked, global::System.Boolean recordLocked, global::System.Boolean postLocked, global::System.Boolean articleLocked, global::System.Boolean testCaseLocked, global::System.Boolean enableTesting, global::System.Boolean testCaseHidden)
        {
            Problem problem = new Problem();
            problem.ID = id;
            problem.Name = name;
            problem.Type = type;
            problem.SubmissionTimes = submissionTimes;
            problem.ScoreSum = scoreSum;
            problem.SubmissionUser = submissionUser;
            problem.CreateTime = createTime;
            problem.Hidden = hidden;
            problem.Locked = locked;
            problem.RecordLocked = recordLocked;
            problem.PostLocked = postLocked;
            problem.ArticleLocked = articleLocked;
            problem.TestCaseLocked = testCaseLocked;
            problem.EnableTesting = enableTesting;
            problem.TestCaseHidden = testCaseHidden;
            return problem;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value, false, "Type");
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.String _Type;
        partial void OnTypeChanging(global::System.String value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubmissionTimes
        {
            get
            {
                return _SubmissionTimes;
            }
            set
            {
                OnSubmissionTimesChanging(value);
                ReportPropertyChanging("SubmissionTimes");
                _SubmissionTimes = StructuralObject.SetValidValue(value, "SubmissionTimes");
                ReportPropertyChanged("SubmissionTimes");
                OnSubmissionTimesChanged();
            }
        }
        private global::System.Int32 _SubmissionTimes;
        partial void OnSubmissionTimesChanging(global::System.Int32 value);
        partial void OnSubmissionTimesChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ScoreSum
        {
            get
            {
                return _ScoreSum;
            }
            set
            {
                OnScoreSumChanging(value);
                ReportPropertyChanging("ScoreSum");
                _ScoreSum = StructuralObject.SetValidValue(value, "ScoreSum");
                ReportPropertyChanged("ScoreSum");
                OnScoreSumChanged();
            }
        }
        private global::System.Int64 _ScoreSum;
        partial void OnScoreSumChanging(global::System.Int64 value);
        partial void OnScoreSumChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SubmissionUser
        {
            get
            {
                return _SubmissionUser;
            }
            set
            {
                OnSubmissionUserChanging(value);
                ReportPropertyChanging("SubmissionUser");
                _SubmissionUser = StructuralObject.SetValidValue(value, "SubmissionUser");
                ReportPropertyChanged("SubmissionUser");
                OnSubmissionUserChanged();
            }
        }
        private global::System.Int32 _SubmissionUser;
        partial void OnSubmissionUserChanging(global::System.Int32 value);
        partial void OnSubmissionUserChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MaximumScore
        {
            get
            {
                return _MaximumScore;
            }
            set
            {
                OnMaximumScoreChanging(value);
                ReportPropertyChanging("MaximumScore");
                _MaximumScore = StructuralObject.SetValidValue(value, "MaximumScore");
                ReportPropertyChanged("MaximumScore");
                OnMaximumScoreChanged();
            }
        }
        private Nullable<global::System.Int32> _MaximumScore;
        partial void OnMaximumScoreChanging(Nullable<global::System.Int32> value);
        partial void OnMaximumScoreChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Hidden
        {
            get
            {
                return _Hidden;
            }
            set
            {
                OnHiddenChanging(value);
                ReportPropertyChanging("Hidden");
                _Hidden = StructuralObject.SetValidValue(value, "Hidden");
                ReportPropertyChanged("Hidden");
                OnHiddenChanged();
            }
        }
        private global::System.Boolean _Hidden;
        partial void OnHiddenChanging(global::System.Boolean value);
        partial void OnHiddenChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Locked
        {
            get
            {
                return _Locked;
            }
            set
            {
                OnLockedChanging(value);
                ReportPropertyChanging("Locked");
                _Locked = StructuralObject.SetValidValue(value, "Locked");
                ReportPropertyChanged("Locked");
                OnLockedChanged();
            }
        }
        private global::System.Boolean _Locked;
        partial void OnLockedChanging(global::System.Boolean value);
        partial void OnLockedChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean RecordLocked
        {
            get
            {
                return _RecordLocked;
            }
            set
            {
                OnRecordLockedChanging(value);
                ReportPropertyChanging("RecordLocked");
                _RecordLocked = StructuralObject.SetValidValue(value, "RecordLocked");
                ReportPropertyChanged("RecordLocked");
                OnRecordLockedChanged();
            }
        }
        private global::System.Boolean _RecordLocked;
        partial void OnRecordLockedChanging(global::System.Boolean value);
        partial void OnRecordLockedChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean PostLocked
        {
            get
            {
                return _PostLocked;
            }
            set
            {
                OnPostLockedChanging(value);
                ReportPropertyChanging("PostLocked");
                _PostLocked = StructuralObject.SetValidValue(value, "PostLocked");
                ReportPropertyChanged("PostLocked");
                OnPostLockedChanged();
            }
        }
        private global::System.Boolean _PostLocked;
        partial void OnPostLockedChanging(global::System.Boolean value);
        partial void OnPostLockedChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ArticleLocked
        {
            get
            {
                return _ArticleLocked;
            }
            set
            {
                OnArticleLockedChanging(value);
                ReportPropertyChanging("ArticleLocked");
                _ArticleLocked = StructuralObject.SetValidValue(value, "ArticleLocked");
                ReportPropertyChanged("ArticleLocked");
                OnArticleLockedChanged();
            }
        }
        private global::System.Boolean _ArticleLocked;
        partial void OnArticleLockedChanging(global::System.Boolean value);
        partial void OnArticleLockedChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean TestCaseLocked
        {
            get
            {
                return _TestCaseLocked;
            }
            set
            {
                OnTestCaseLockedChanging(value);
                ReportPropertyChanging("TestCaseLocked");
                _TestCaseLocked = StructuralObject.SetValidValue(value, "TestCaseLocked");
                ReportPropertyChanged("TestCaseLocked");
                OnTestCaseLockedChanged();
            }
        }
        private global::System.Boolean _TestCaseLocked;
        partial void OnTestCaseLockedChanging(global::System.Boolean value);
        partial void OnTestCaseLockedChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean EnableTesting
        {
            get
            {
                return _EnableTesting;
            }
            set
            {
                OnEnableTestingChanging(value);
                ReportPropertyChanging("EnableTesting");
                _EnableTesting = StructuralObject.SetValidValue(value, "EnableTesting");
                ReportPropertyChanged("EnableTesting");
                OnEnableTestingChanged();
            }
        }
        private global::System.Boolean _EnableTesting;
        partial void OnEnableTestingChanging(global::System.Boolean value);
        partial void OnEnableTestingChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean TestCaseHidden
        {
            get
            {
                return _TestCaseHidden;
            }
            set
            {
                OnTestCaseHiddenChanging(value);
                ReportPropertyChanging("TestCaseHidden");
                _TestCaseHidden = StructuralObject.SetValidValue(value, "TestCaseHidden");
                ReportPropertyChanged("TestCaseHidden");
                OnTestCaseHiddenChanged();
            }
        }
        private global::System.Boolean _TestCaseHidden;
        partial void OnTestCaseHiddenChanging(global::System.Boolean value);
        partial void OnTestCaseHiddenChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "LastestRevisionOfProblem", "ProblemRevision")]
        public ProblemRevision LatestRevision
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemRevision>("Moo.Core.DB.LastestRevisionOfProblem", "ProblemRevision").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemRevision>("Moo.Core.DB.LastestRevisionOfProblem", "ProblemRevision").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ProblemRevision> LatestRevisionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProblemRevision>("Moo.Core.DB.LastestRevisionOfProblem", "ProblemRevision");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ProblemRevision>("Moo.Core.DB.LastestRevisionOfProblem", "ProblemRevision", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ContestProblem", "Contest")]
        public EntityCollection<Contest> Contest
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Contest>("Moo.Core.DB.ContestProblem", "Contest");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Contest>("Moo.Core.DB.ContestProblem", "Contest", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserCreateProblem", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateProblem", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateProblem", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserCreateProblem", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserCreateProblem", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="ProblemRevision")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProblemRevision : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 ProblemRevision 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="content">Content 属性的初始值。</param>
        /// <param name="reason">Reason 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        public static ProblemRevision CreateProblemRevision(global::System.Int32 id, global::System.String content, global::System.String reason, global::System.DateTime createTime)
        {
            ProblemRevision problemRevision = new ProblemRevision();
            problemRevision.ID = id;
            problemRevision.Content = content;
            problemRevision.Reason = reason;
            problemRevision.CreateTime = createTime;
            return problemRevision;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, false, "Content");
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Reason
        {
            get
            {
                return _Reason;
            }
            set
            {
                OnReasonChanging(value);
                ReportPropertyChanging("Reason");
                _Reason = StructuralObject.SetValidValue(value, false, "Reason");
                ReportPropertyChanged("Reason");
                OnReasonChanged();
            }
        }
        private global::System.String _Reason;
        partial void OnReasonChanging(global::System.String value);
        partial void OnReasonChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "ProblemProblemRevision", "Problem")]
        public Problem Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ProblemProblemRevision", "Problem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ProblemProblemRevision", "Problem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Problem> ProblemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.ProblemProblemRevision", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Problem>("Moo.Core.DB.ProblemProblemRevision", "Problem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserProblemRevision", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserProblemRevision", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserProblemRevision", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserProblemRevision", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserProblemRevision", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Record")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Record : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Record 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="code">Code 属性的初始值。</param>
        /// <param name="createTime">CreateTime 属性的初始值。</param>
        /// <param name="language">Language 属性的初始值。</param>
        /// <param name="publicCode">PublicCode 属性的初始值。</param>
        public static Record CreateRecord(global::System.Int32 id, global::System.String code, global::System.DateTime createTime, global::System.String language, global::System.Boolean publicCode)
        {
            Record record = new Record();
            record.ID = id;
            record.Code = code;
            record.CreateTime = createTime;
            record.Language = language;
            record.PublicCode = publicCode;
            return record;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false, "Code");
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime CreateTime
        {
            get
            {
                return _CreateTime;
            }
            set
            {
                OnCreateTimeChanging(value);
                ReportPropertyChanging("CreateTime");
                _CreateTime = StructuralObject.SetValidValue(value, "CreateTime");
                ReportPropertyChanged("CreateTime");
                OnCreateTimeChanged();
            }
        }
        private global::System.DateTime _CreateTime;
        partial void OnCreateTimeChanging(global::System.DateTime value);
        partial void OnCreateTimeChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Language
        {
            get
            {
                return _Language;
            }
            set
            {
                OnLanguageChanging(value);
                ReportPropertyChanging("Language");
                _Language = StructuralObject.SetValidValue(value, false, "Language");
                ReportPropertyChanged("Language");
                OnLanguageChanged();
            }
        }
        private global::System.String _Language;
        partial void OnLanguageChanging(global::System.String value);
        partial void OnLanguageChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean PublicCode
        {
            get
            {
                return _PublicCode;
            }
            set
            {
                OnPublicCodeChanging(value);
                ReportPropertyChanging("PublicCode");
                _PublicCode = StructuralObject.SetValidValue(value, "PublicCode");
                ReportPropertyChanged("PublicCode");
                OnPublicCodeChanged();
            }
        }
        private global::System.Boolean _PublicCode;
        partial void OnPublicCodeChanging(global::System.Boolean value);
        partial void OnPublicCodeChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "RecordProblem", "Problem")]
        public Problem Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.RecordProblem", "Problem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.RecordProblem", "Problem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Problem> ProblemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.RecordProblem", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Problem>("Moo.Core.DB.RecordProblem", "Problem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "RecordJudgeInfo", "JudgeInfo")]
        public JudgeInfo JudgeInfo
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<JudgeInfo>("Moo.Core.DB.RecordJudgeInfo", "JudgeInfo").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<JudgeInfo>("Moo.Core.DB.RecordJudgeInfo", "JudgeInfo").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<JudgeInfo> JudgeInfoReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<JudgeInfo>("Moo.Core.DB.RecordJudgeInfo", "JudgeInfo");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<JudgeInfo>("Moo.Core.DB.RecordJudgeInfo", "JudgeInfo", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserRecord", "User")]
        public User User
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserRecord", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserRecord", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> UserReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserRecord", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserRecord", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Role")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Role : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Role 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="displayName">DisplayName 属性的初始值。</param>
        public static Role CreateRole(global::System.Int32 id, global::System.String name, global::System.String displayName)
        {
            Role role = new Role();
            role.ID = id;
            role.Name = name;
            role.DisplayName = displayName;
            return role;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String DisplayName
        {
            get
            {
                return _DisplayName;
            }
            set
            {
                OnDisplayNameChanging(value);
                ReportPropertyChanging("DisplayName");
                _DisplayName = StructuralObject.SetValidValue(value, false, "DisplayName");
                ReportPropertyChanged("DisplayName");
                OnDisplayNameChanged();
            }
        }
        private global::System.String _DisplayName;
        partial void OnDisplayNameChanging(global::System.String value);
        partial void OnDisplayNameChanged();

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="SpecialJudgedTestCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class SpecialJudgedTestCase : TestCase
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 SpecialJudgedTestCase 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="input">Input 属性的初始值。</param>
        /// <param name="answer">Answer 属性的初始值。</param>
        /// <param name="timeLimit">TimeLimit 属性的初始值。</param>
        /// <param name="memoryLimit">MemoryLimit 属性的初始值。</param>
        public static SpecialJudgedTestCase CreateSpecialJudgedTestCase(global::System.Int32 id, global::System.Byte[] input, global::System.Byte[] answer, global::System.Int32 timeLimit, global::System.Int32 memoryLimit)
        {
            SpecialJudgedTestCase specialJudgedTestCase = new SpecialJudgedTestCase();
            specialJudgedTestCase.ID = id;
            specialJudgedTestCase.Input = input;
            specialJudgedTestCase.Answer = answer;
            specialJudgedTestCase.TimeLimit = timeLimit;
            specialJudgedTestCase.MemoryLimit = memoryLimit;
            return specialJudgedTestCase;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] Input
        {
            get
            {
                return StructuralObject.GetValidValue(_Input);
            }
            set
            {
                OnInputChanging(value);
                ReportPropertyChanging("Input");
                _Input = StructuralObject.SetValidValue(value, false, "Input");
                ReportPropertyChanged("Input");
                OnInputChanged();
            }
        }
        private global::System.Byte[] _Input;
        partial void OnInputChanging(global::System.Byte[] value);
        partial void OnInputChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] Answer
        {
            get
            {
                return StructuralObject.GetValidValue(_Answer);
            }
            set
            {
                OnAnswerChanging(value);
                ReportPropertyChanging("Answer");
                _Answer = StructuralObject.SetValidValue(value, false, "Answer");
                ReportPropertyChanged("Answer");
                OnAnswerChanged();
            }
        }
        private global::System.Byte[] _Answer;
        partial void OnAnswerChanging(global::System.Byte[] value);
        partial void OnAnswerChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TimeLimit
        {
            get
            {
                return _TimeLimit;
            }
            set
            {
                OnTimeLimitChanging(value);
                ReportPropertyChanging("TimeLimit");
                _TimeLimit = StructuralObject.SetValidValue(value, "TimeLimit");
                ReportPropertyChanged("TimeLimit");
                OnTimeLimitChanged();
            }
        }
        private global::System.Int32 _TimeLimit;
        partial void OnTimeLimitChanging(global::System.Int32 value);
        partial void OnTimeLimitChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryLimit
        {
            get
            {
                return _MemoryLimit;
            }
            set
            {
                OnMemoryLimitChanging(value);
                ReportPropertyChanging("MemoryLimit");
                _MemoryLimit = StructuralObject.SetValidValue(value, "MemoryLimit");
                ReportPropertyChanged("MemoryLimit");
                OnMemoryLimitChanged();
            }
        }
        private global::System.Int32 _MemoryLimit;
        partial void OnMemoryLimitChanging(global::System.Int32 value);
        partial void OnMemoryLimitChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "SpecialJudgedTestCaseUploadedFile", "UploadedFile")]
        public UploadedFile Judger
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.SpecialJudgedTestCaseUploadedFile", "UploadedFile").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.SpecialJudgedTestCaseUploadedFile", "UploadedFile").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<UploadedFile> JudgerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<UploadedFile>("Moo.Core.DB.SpecialJudgedTestCaseUploadedFile", "UploadedFile");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<UploadedFile>("Moo.Core.DB.SpecialJudgedTestCaseUploadedFile", "UploadedFile", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="Tag")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Tag : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 Tag 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        public static Tag CreateTag(global::System.Int32 id, global::System.String name)
        {
            Tag tag = new Tag();
            tag.ID = id;
            tag.Name = name;
            return tag;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="TestCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(SpecialJudgedTestCase))]
    [KnownTypeAttribute(typeof(InteractiveTestCase))]
    [KnownTypeAttribute(typeof(AnswerOnlyTestCase))]
    [KnownTypeAttribute(typeof(TranditionalTestCase))]
    public abstract partial class TestCase : EntityObject
    {
        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "TestDataProblem", "Problem")]
        public Problem Problem
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.TestDataProblem", "Problem").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.TestDataProblem", "Problem").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Problem> ProblemReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Problem>("Moo.Core.DB.TestDataProblem", "Problem");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Problem>("Moo.Core.DB.TestDataProblem", "Problem", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserTestCase", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserTestCase", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserTestCase", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UserTestCase", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UserTestCase", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="TranditionalTestCase")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TranditionalTestCase : TestCase
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 TranditionalTestCase 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="input">Input 属性的初始值。</param>
        /// <param name="answer">Answer 属性的初始值。</param>
        /// <param name="timeLimit">TimeLimit 属性的初始值。</param>
        /// <param name="memoryLimit">MemoryLimit 属性的初始值。</param>
        /// <param name="score">Score 属性的初始值。</param>
        public static TranditionalTestCase CreateTranditionalTestCase(global::System.Int32 id, global::System.Byte[] input, global::System.Byte[] answer, global::System.Int32 timeLimit, global::System.Int32 memoryLimit, global::System.Int32 score)
        {
            TranditionalTestCase tranditionalTestCase = new TranditionalTestCase();
            tranditionalTestCase.ID = id;
            tranditionalTestCase.Input = input;
            tranditionalTestCase.Answer = answer;
            tranditionalTestCase.TimeLimit = timeLimit;
            tranditionalTestCase.MemoryLimit = memoryLimit;
            tranditionalTestCase.Score = score;
            return tranditionalTestCase;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] Input
        {
            get
            {
                return StructuralObject.GetValidValue(_Input);
            }
            set
            {
                OnInputChanging(value);
                ReportPropertyChanging("Input");
                _Input = StructuralObject.SetValidValue(value, false, "Input");
                ReportPropertyChanged("Input");
                OnInputChanged();
            }
        }
        private global::System.Byte[] _Input;
        partial void OnInputChanging(global::System.Byte[] value);
        partial void OnInputChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Byte[] Answer
        {
            get
            {
                return StructuralObject.GetValidValue(_Answer);
            }
            set
            {
                OnAnswerChanging(value);
                ReportPropertyChanging("Answer");
                _Answer = StructuralObject.SetValidValue(value, false, "Answer");
                ReportPropertyChanged("Answer");
                OnAnswerChanged();
            }
        }
        private global::System.Byte[] _Answer;
        partial void OnAnswerChanging(global::System.Byte[] value);
        partial void OnAnswerChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TimeLimit
        {
            get
            {
                return _TimeLimit;
            }
            set
            {
                OnTimeLimitChanging(value);
                ReportPropertyChanging("TimeLimit");
                _TimeLimit = StructuralObject.SetValidValue(value, "TimeLimit");
                ReportPropertyChanged("TimeLimit");
                OnTimeLimitChanged();
            }
        }
        private global::System.Int32 _TimeLimit;
        partial void OnTimeLimitChanging(global::System.Int32 value);
        partial void OnTimeLimitChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MemoryLimit
        {
            get
            {
                return _MemoryLimit;
            }
            set
            {
                OnMemoryLimitChanging(value);
                ReportPropertyChanging("MemoryLimit");
                _MemoryLimit = StructuralObject.SetValidValue(value, "MemoryLimit");
                ReportPropertyChanged("MemoryLimit");
                OnMemoryLimitChanged();
            }
        }
        private global::System.Int32 _MemoryLimit;
        partial void OnMemoryLimitChanging(global::System.Int32 value);
        partial void OnMemoryLimitChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, "Score");
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="UploadedFile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UploadedFile : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 UploadedFile 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="path">Path 属性的初始值。</param>
        /// <param name="description">Description 属性的初始值。</param>
        public static UploadedFile CreateUploadedFile(global::System.Int32 id, global::System.String name, global::System.String path, global::System.String description)
        {
            UploadedFile uploadedFile = new UploadedFile();
            uploadedFile.ID = id;
            uploadedFile.Name = name;
            uploadedFile.Path = path;
            uploadedFile.Description = description;
            return uploadedFile;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Path
        {
            get
            {
                return _Path;
            }
            set
            {
                OnPathChanging(value);
                ReportPropertyChanging("Path");
                _Path = StructuralObject.SetValidValue(value, false, "Path");
                ReportPropertyChanged("Path");
                OnPathChanged();
            }
        }
        private global::System.String _Path;
        partial void OnPathChanging(global::System.String value);
        partial void OnPathChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UploadedFileUser", "User")]
        public User CreatedBy
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UploadedFileUser", "User").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UploadedFileUser", "User").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<User> CreatedByReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<User>("Moo.Core.DB.UploadedFileUser", "User");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<User>("Moo.Core.DB.UploadedFileUser", "User", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Moo.Core.DB", Name="User")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class User : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 User 对象。
        /// </summary>
        /// <param name="id">ID 属性的初始值。</param>
        /// <param name="name">Name 属性的初始值。</param>
        /// <param name="password">Password 属性的初始值。</param>
        /// <param name="briefDescription">BriefDescription 属性的初始值。</param>
        /// <param name="email">Email 属性的初始值。</param>
        /// <param name="description">Description 属性的初始值。</param>
        /// <param name="score">Score 属性的初始值。</param>
        /// <param name="preferredLanguage">PreferredLanguage 属性的初始值。</param>
        public static User CreateUser(global::System.Int32 id, global::System.String name, global::System.String password, global::System.String briefDescription, global::System.String email, global::System.String description, global::System.Int32 score, global::System.String preferredLanguage)
        {
            User user = new User();
            user.ID = id;
            user.Name = name;
            user.Password = password;
            user.BriefDescription = briefDescription;
            user.Email = email;
            user.Description = description;
            user.Score = score;
            user.PreferredLanguage = preferredLanguage;
            return user;
        }

        #endregion

        #region 简单属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value, "ID");
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false, "Password");
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BriefDescription
        {
            get
            {
                return _BriefDescription;
            }
            set
            {
                OnBriefDescriptionChanging(value);
                ReportPropertyChanging("BriefDescription");
                _BriefDescription = StructuralObject.SetValidValue(value, false, "BriefDescription");
                ReportPropertyChanged("BriefDescription");
                OnBriefDescriptionChanged();
            }
        }
        private global::System.String _BriefDescription;
        partial void OnBriefDescriptionChanging(global::System.String value);
        partial void OnBriefDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false, "Email");
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false, "Description");
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Score
        {
            get
            {
                return _Score;
            }
            set
            {
                OnScoreChanging(value);
                ReportPropertyChanging("Score");
                _Score = StructuralObject.SetValidValue(value, "Score");
                ReportPropertyChanged("Score");
                OnScoreChanged();
            }
        }
        private global::System.Int32 _Score;
        partial void OnScoreChanging(global::System.Int32 value);
        partial void OnScoreChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PreferredLanguage
        {
            get
            {
                return _PreferredLanguage;
            }
            set
            {
                OnPreferredLanguageChanging(value);
                ReportPropertyChanging("PreferredLanguage");
                _PreferredLanguage = StructuralObject.SetValidValue(value, false, "PreferredLanguage");
                ReportPropertyChanged("PreferredLanguage");
                OnPreferredLanguageChanged();
            }
        }
        private global::System.String _PreferredLanguage;
        partial void OnPreferredLanguageChanging(global::System.String value);
        partial void OnPreferredLanguageChanged();

        #endregion

        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserRole", "Role")]
        public Role Role
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("Moo.Core.DB.UserRole", "Role").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("Moo.Core.DB.UserRole", "Role").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Role> RoleReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Role>("Moo.Core.DB.UserRole", "Role");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Role>("Moo.Core.DB.UserRole", "Role", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Moo.Core.DB", "UserRecord", "Record")]
        public EntityCollection<Record> Record
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Record>("Moo.Core.DB.UserRecord", "Record");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Record>("Moo.Core.DB.UserRecord", "Record", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
